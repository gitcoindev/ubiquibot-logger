{"version":3,"sources":["../src/commit-hash.ts","../src/supabase/helpers/tables/pretty-logs.ts","../src/supabase/helpers/tables/logs.ts"],"sourcesContent":["import { execSync } from \"child_process\";\nexport let COMMIT_HASH: null | string = null; // \"0000000000000000000000000000000000000000\";\n\ntry {\n  COMMIT_HASH = execSync(\"git rev-parse --short HEAD\").toString().trim();\n} catch (e) {\n  // netlify has no git binary\n}\n","import util from \"util\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype PrettyLogsWithOk = \"ok\" | LogLevel;\nexport class PrettyLogs {\n  constructor() {\n    this.ok = this.ok.bind(this);\n    this.info = this.info.bind(this);\n    this.error = this.error.bind(this);\n    this.fatal = this.fatal.bind(this);\n    this.debug = this.debug.bind(this);\n    this.verbose = this.verbose.bind(this);\n  }\n  public fatal(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.FATAL, message, metadata);\n  }\n\n  public error(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.ERROR, message, metadata);\n  }\n\n  public ok(message: string, metadata?: any) {\n    this._logWithStack(\"ok\", message, metadata);\n  }\n\n  public info(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.INFO, message, metadata);\n  }\n\n  public debug(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.DEBUG, message, metadata);\n  }\n\n  public verbose(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.VERBOSE, message, metadata);\n  }\n\n  private _logWithStack(type: \"ok\" | LogLevel, message: string, metadata?: Metadata | string) {\n    this._log(type, message);\n    if (typeof metadata === \"string\") {\n      this._log(type, metadata);\n      return;\n    }\n    if (metadata) {\n      let stack = metadata?.error?.stack || metadata?.stack;\n      if (!stack) {\n        // generate and remove the top four lines of the stack trace\n        const stackTrace = new Error().stack?.split(\"\\n\");\n        if (stackTrace) {\n          stackTrace.splice(0, 4);\n          stack = stackTrace.filter((line) => line.includes(\".ts:\")).join(\"\\n\");\n        }\n      }\n      const newMetadata = { ...metadata };\n      delete newMetadata.message;\n      delete newMetadata.name;\n      delete newMetadata.stack;\n\n      if (!this._isEmpty(newMetadata)) {\n        this._log(type, newMetadata);\n      }\n\n      if (typeof stack == \"string\") {\n        const prettyStack = this._formatStackTrace(stack, 1);\n        const colorizedStack = this._colorizeText(prettyStack, Colors.dim);\n        this._log(type, colorizedStack);\n      } else if (stack) {\n        const prettyStack = this._formatStackTrace((stack as unknown as string[]).join(\"\\n\"), 1);\n        const colorizedStack = this._colorizeText(prettyStack, Colors.dim);\n        this._log(type, colorizedStack);\n      } else {\n        throw new Error(\"Stack is null\");\n      }\n    }\n  }\n\n  private _colorizeText(text: string, color: Colors): string {\n    if (!color) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    return color.concat(text).concat(Colors.reset);\n  }\n\n  private _formatStackTrace(stack: string, linesToRemove = 0, prefix = \"\"): string {\n    const lines = stack.split(\"\\n\");\n    for (let i = 0; i < linesToRemove; i++) {\n      lines.shift(); // Remove the top line\n    }\n    return lines\n      .map((line) => `${prefix}${line.replace(/\\s*at\\s*/, \"  â†³  \")}`) // Replace 'at' and prefix every line\n      .join(\"\\n\");\n  }\n\n  private _isEmpty(obj: Record<string, any>) {\n    return !Reflect.ownKeys(obj).some((key) => typeof obj[String(key)] !== \"function\");\n  }\n\n  private _log(type: PrettyLogsWithOk, message: any) {\n    const defaultSymbols: Record<PrettyLogsWithOk, string> = {\n      fatal: \"Ã—\",\n      ok: \"âœ“\",\n      error: \"âš \",\n      info: \"â€º\",\n      debug: \"â€ºâ€º\",\n      verbose: \"ðŸ’¬\",\n    };\n\n    const symbol = defaultSymbols[type];\n\n    // Formatting the message\n    const messageFormatted = typeof message === \"string\" ? message : util.inspect(message, { showHidden: true, depth: null, breakLength: Infinity });\n    // const messageFormatted =\n    //   typeof message === \"string\" ? message : JSON.stringify(Logs.convertErrorsIntoObjects(message));\n\n    // Constructing the full log string with the prefix symbol\n    const lines = messageFormatted.split(\"\\n\");\n    const logString = lines\n      .map((line, index) => {\n        // Add the symbol only to the first line and keep the indentation for the rest\n        const prefix = index === 0 ? `\\t${symbol}` : `\\t${\" \".repeat(symbol.length)}`;\n        return `${prefix} ${line}`;\n      })\n      .join(\"\\n\");\n\n    const fullLogString = logString;\n\n    const colorMap: Record<PrettyLogsWithOk, [keyof typeof console, Colors]> = {\n      fatal: [\"error\", Colors.fgRed],\n      ok: [\"log\", Colors.fgGreen],\n      error: [\"warn\", Colors.fgYellow],\n      info: [\"info\", Colors.dim],\n      debug: [\"debug\", Colors.fgMagenta],\n      verbose: [\"debug\", Colors.dim],\n    };\n\n    const _console = console[colorMap[type][0] as keyof typeof console] as (...args: string[]) => void;\n    if (typeof _console === \"function\") {\n      _console(this._colorizeText(fullLogString, colorMap[type][1]));\n    } else {\n      throw new Error(fullLogString);\n    }\n  }\n}\ninterface Metadata {\n  error?: { stack?: string };\n  stack?: string;\n  message?: string;\n  name?: string;\n  [key: string]: any;\n}\n\nenum Colors {\n  reset = \"\\x1b[0m\",\n  bright = \"\\x1b[1m\",\n  dim = \"\\x1b[2m\",\n  underscore = \"\\x1b[4m\",\n  blink = \"\\x1b[5m\",\n  reverse = \"\\x1b[7m\",\n  hidden = \"\\x1b[8m\",\n\n  fgBlack = \"\\x1b[30m\",\n  fgRed = \"\\x1b[31m\",\n  fgGreen = \"\\x1b[32m\",\n  fgYellow = \"\\x1b[33m\",\n  fgBlue = \"\\x1b[34m\",\n  fgMagenta = \"\\x1b[35m\",\n  fgCyan = \"\\x1b[36m\",\n  fgWhite = \"\\x1b[37m\",\n\n  bgBlack = \"\\x1b[40m\",\n  bgRed = \"\\x1b[41m\",\n  bgGreen = \"\\x1b[42m\",\n  bgYellow = \"\\x1b[43m\",\n  bgBlue = \"\\x1b[44m\",\n  bgMagenta = \"\\x1b[45m\",\n  bgCyan = \"\\x1b[46m\",\n  bgWhite = \"\\x1b[47m\",\n}\nexport enum LogLevel {\n  FATAL = \"fatal\",\n  ERROR = \"error\",\n  INFO = \"info\",\n  VERBOSE = \"verbose\",\n  DEBUG = \"debug\",\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// This is disabled because logs should be able to log any type of data\n// Normally this is forbidden\n\nimport { SupabaseClient } from \"@supabase/supabase-js\";\nimport { Context as ProbotContext } from \"probot\";\nimport { COMMIT_HASH } from \"../../../commit-hash\";\nimport { Database } from \"../../types/database\";\n\nimport { LogLevel, PrettyLogs } from \"./pretty-logs\";\n\ntype LogFunction = (message: string, metadata?: any) => void;\ntype LogInsert = Database[\"public\"][\"Tables\"][\"logs\"][\"Insert\"];\ntype LogParams = {\n  level: LogLevel;\n  consoleLog: LogFunction;\n  logMessage: string;\n  metadata?: any;\n  postComment?: boolean;\n  type: PublicMethods<Logs>;\n};\nexport class LogReturn {\n  logMessage: LogMessage;\n  metadata?: any;\n\n  constructor(logMessage: LogMessage, metadata?: any) {\n    this.logMessage = logMessage;\n    this.metadata = metadata;\n  }\n}\n\ntype FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never;\n}[keyof T];\n\ntype PublicMethods<T> = Exclude<FunctionPropertyNames<T>, \"constructor\" | keyof object>;\n\nexport type LogMessage = { raw: string; diff: string; level: LogLevel; type: PublicMethods<Logs> };\n\nexport class Logs {\n  private _supabase: SupabaseClient;\n  private _context: ProbotContext | null = null;\n\n  private _maxLevel = -1;\n  private _queue: LogInsert[] = []; // Your log queue\n  private _concurrency = 6; // Maximum concurrent requests\n  private _retryDelay = 1000; // Delay between retries in milliseconds\n  private _throttleCount = 0;\n  private _retryLimit = 0; // Retries disabled by default\n\n  static console: PrettyLogs;\n\n  private _log({ level, consoleLog, logMessage, metadata, postComment, type }: LogParams): LogReturn | null {\n    if (this._getNumericLevel(level) > this._maxLevel) return null; // filter out more verbose logs according to maxLevel set in config\n\n    // needs to generate three versions of the information.\n    // they must all first serialize the error object if it exists\n    // - the comment to post on supabase (must be raw)\n    // - the comment to post on github (must include diff syntax)\n    // - the comment to post on the console (must be colorized)\n\n    consoleLog(logMessage, metadata || undefined);\n\n    if (this._context && postComment) {\n      const colorizedCommentMessage = this._diffColorCommentMessage(type, logMessage);\n      const commentMetaData = metadata ? Logs._commentMetaData(metadata, level) : null;\n      this._postComment(metadata ? [colorizedCommentMessage, commentMetaData].join(\"\\n\") : colorizedCommentMessage);\n    }\n\n    const toSupabase = { log: logMessage, level, metadata } as LogInsert;\n\n    this._save(toSupabase);\n\n    return new LogReturn(\n      {\n        raw: logMessage,\n        diff: this._diffColorCommentMessage(type, logMessage),\n        type,\n        level,\n      },\n      metadata\n    );\n  }\n  private _addDiagnosticInformation(metadata: any) {\n    // this is a utility function to get the name of the function that called the log\n    // I have mixed feelings on this because it manipulates metadata later possibly without the developer understanding why and where,\n    // but seems useful for the metadata parser to understand where the comment originated from\n\n    if (!metadata) {\n      metadata = {};\n    }\n    if (typeof metadata == \"string\" || typeof metadata == \"number\") {\n      // TODO: think i need to support every data type\n      metadata = { message: metadata };\n    }\n\n    const stackLines = new Error().stack?.split(\"\\n\") || [];\n    if (stackLines.length > 3) {\n      const callerLine = stackLines[3]; // .replace(process.cwd(), \"\");\n      const match = callerLine.match(/at (\\S+)/);\n      if (match) {\n        metadata.caller = match[1];\n      }\n    }\n\n    const gitCommit = COMMIT_HASH?.substring(0, 7) ?? null;\n    metadata.revision = gitCommit;\n\n    return metadata;\n  }\n\n  public ok(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.INFO,\n      consoleLog: Logs.console.ok,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"ok\",\n    });\n  }\n\n  public info(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.INFO,\n      consoleLog: Logs.console.info,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"info\",\n    });\n  }\n\n  public error(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.ERROR,\n      consoleLog: Logs.console.error,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"error\",\n    });\n  }\n\n  public debug(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.DEBUG,\n      consoleLog: Logs.console.debug,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"debug\",\n    });\n  }\n\n  public fatal(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    if (!metadata) {\n      metadata = Logs.convertErrorsIntoObjects(new Error(log));\n      const stack = metadata.stack as string[];\n      stack.splice(1, 1);\n      metadata.stack = stack;\n    }\n    if (metadata instanceof Error) {\n      metadata = Logs.convertErrorsIntoObjects(metadata);\n      const stack = metadata.stack as string[];\n      stack.splice(1, 1);\n      metadata.stack = stack;\n    }\n\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.FATAL,\n      consoleLog: Logs.console.fatal,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"fatal\",\n    });\n  }\n\n  verbose(log: string, metadata?: any, postComment?: boolean): LogReturn | null {\n    metadata = this._addDiagnosticInformation(metadata);\n    return this._log({\n      level: LogLevel.VERBOSE,\n      consoleLog: Logs.console.verbose,\n      logMessage: log,\n      metadata,\n      postComment,\n      type: \"verbose\",\n    });\n  }\n\n  constructor(supabase: SupabaseClient, retryLimit: number, logLevel: LogLevel, context: ProbotContext | null) {\n    this._supabase = supabase;\n    this._context = context;\n    this._retryLimit = retryLimit;\n    this._maxLevel = this._getNumericLevel(logLevel);\n    Logs.console = new PrettyLogs();\n  }\n\n  private async _sendLogsToSupabase(log: LogInsert) {\n    const { error } = await this._supabase.from(\"logs\").insert(log);\n    if (error) throw Logs.console.fatal(\"Error logging to Supabase:\", error);\n  }\n\n  private async _processLogs(log: LogInsert) {\n    try {\n      await this._sendLogsToSupabase(log);\n    } catch (error) {\n      Logs.console.fatal(\"Error sending log, retrying:\", error);\n      return this._retryLimit > 0 ? await this._retryLog(log) : null;\n    }\n  }\n\n  private async _retryLog(log: LogInsert, retryCount = 0) {\n    if (retryCount >= this._retryLimit) {\n      Logs.console.fatal(\"Max retry limit reached for log:\", log);\n      return;\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, this._retryDelay));\n\n    try {\n      await this._sendLogsToSupabase(log);\n    } catch (error) {\n      Logs.console.fatal(\"Error sending log (after retry):\", error);\n      await this._retryLog(log, retryCount + 1);\n    }\n  }\n\n  private async _processLogQueue() {\n    while (this._queue.length > 0) {\n      const log = this._queue.shift();\n      if (!log) {\n        continue;\n      }\n      await this._processLogs(log);\n    }\n  }\n\n  private async _throttle() {\n    if (this._throttleCount >= this._concurrency) {\n      return;\n    }\n\n    this._throttleCount++;\n    try {\n      await this._processLogQueue();\n    } finally {\n      this._throttleCount--;\n      if (this._queue.length > 0) {\n        await this._throttle();\n      }\n    }\n  }\n\n  private async _addToQueue(log: LogInsert) {\n    this._queue.push(log);\n    if (this._throttleCount < this._concurrency) {\n      await this._throttle();\n    }\n  }\n\n  private _save(logInsert: LogInsert) {\n    this._addToQueue(logInsert)\n      .then(() => void 0)\n      .catch(() => Logs.console.fatal(\"Error adding logs to queue\"));\n\n    Logs.console.ok(logInsert.log, logInsert);\n  }\n\n  static _commentMetaData(metadata: any, level: LogLevel) {\n    Logs.console.debug(\"the main place that metadata is being serialized as an html comment\");\n    const prettySerialized = JSON.stringify(metadata, null, 2);\n    // first check if metadata is an error, then post it as a json comment\n    // otherwise post it as an html comment\n    if (level === LogLevel.FATAL) {\n      return [\"```json\", prettySerialized, \"```\"].join(\"\\n\");\n    } else {\n      return [\"<!--\", prettySerialized, \"-->\"].join(\"\\n\");\n    }\n  }\n\n  private _diffColorCommentMessage(type: string, message: string) {\n    const diffPrefix = {\n      fatal: \"-\", // - text in red\n      ok: \"+\", // + text in green\n      error: \"!\", // ! text in orange\n      // info: \"#\", // # text in gray\n      // debug: \"@@@@\",// @@ text in purple (and bold)@@\n      // error: null,\n      // warn: null,\n      // info: null,\n      // verbose: \"#\",\n      // debug: \"#\",\n    };\n    const selected = diffPrefix[type as keyof typeof diffPrefix];\n\n    if (selected) {\n      message = message\n        .trim() // Remove leading and trailing whitespace\n        .split(\"\\n\")\n        .map((line) => `${selected} ${line}`)\n        .join(\"\\n\");\n    } else if (type === \"debug\") {\n      // debug has special formatting\n      message = message\n        .split(\"\\n\")\n        .map((line) => `@@ ${line} @@`)\n        .join(\"\\n\"); // debug: \"@@@@\",\n    } else {\n      // default to gray\n      message = message\n        .split(\"\\n\")\n        .map((line) => `# ${line}`)\n        .join(\"\\n\");\n    }\n\n    const diffHeader = \"```diff\";\n    const diffFooter = \"```\";\n\n    return [diffHeader, message, diffFooter].join(\"\\n\");\n  }\n\n  private _postComment(message: string) {\n    // post on issue\n    if (!this._context) return;\n    this._context.octokit.issues\n      .createComment({\n        owner: this._context.issue().owner,\n        repo: this._context.issue().repo,\n        issue_number: this._context.issue().issue_number,\n        body: message,\n      })\n      // .then((x) => console.trace(x))\n      .catch((x) => console.trace(x));\n  }\n\n  private _getNumericLevel(level: LogLevel) {\n    switch (level) {\n      case LogLevel.FATAL:\n        return 0;\n      case LogLevel.ERROR:\n        return 1;\n      case LogLevel.INFO:\n        return 2;\n      case LogLevel.VERBOSE:\n        return 4;\n      case LogLevel.DEBUG:\n        return 5;\n      default:\n        return -1; // Invalid level\n    }\n  }\n  static convertErrorsIntoObjects(obj: any): any {\n    // this is a utility function to render native errors in the console, the database, and on GitHub.\n    if (obj instanceof Error) {\n      return {\n        message: obj.message,\n        name: obj.name,\n        stack: obj.stack ? obj.stack.split(\"\\n\") : null,\n      };\n    } else if (typeof obj === \"object\" && obj !== null) {\n      const keys = Object.keys(obj);\n      keys.forEach((key) => {\n        obj[key] = this.convertErrorsIntoObjects(obj[key]);\n      });\n    }\n    return obj;\n  }\n}\n"],"mappings":"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","names":[]}