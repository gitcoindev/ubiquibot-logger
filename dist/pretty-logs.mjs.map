{"version":3,"sources":["../src/supabase/helpers/tables/pretty-logs.ts"],"sourcesContent":["import util from \"util\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype PrettyLogsWithOk = \"ok\" | LogLevel;\nexport class PrettyLogs {\n  constructor() {\n    this.ok = this.ok.bind(this);\n    this.info = this.info.bind(this);\n    this.error = this.error.bind(this);\n    this.fatal = this.fatal.bind(this);\n    this.debug = this.debug.bind(this);\n    this.verbose = this.verbose.bind(this);\n  }\n  public fatal(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.FATAL, message, metadata);\n  }\n\n  public error(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.ERROR, message, metadata);\n  }\n\n  public ok(message: string, metadata?: any) {\n    this._logWithStack(\"ok\", message, metadata);\n  }\n\n  public info(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.INFO, message, metadata);\n  }\n\n  public debug(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.DEBUG, message, metadata);\n  }\n\n  public verbose(message: string, metadata?: any) {\n    this._logWithStack(LogLevel.VERBOSE, message, metadata);\n  }\n\n  private _logWithStack(type: \"ok\" | LogLevel, message: string, metadata?: Metadata | string) {\n    this._log(type, message);\n    if (typeof metadata === \"string\") {\n      this._log(type, metadata);\n      return;\n    }\n    if (metadata) {\n      let stack = metadata?.error?.stack || metadata?.stack;\n      if (!stack) {\n        // generate and remove the top four lines of the stack trace\n        const stackTrace = new Error().stack?.split(\"\\n\");\n        if (stackTrace) {\n          stackTrace.splice(0, 4);\n          stack = stackTrace.filter((line) => line.includes(\".ts:\")).join(\"\\n\");\n        }\n      }\n      const newMetadata = { ...metadata };\n      delete newMetadata.message;\n      delete newMetadata.name;\n      delete newMetadata.stack;\n\n      if (!this._isEmpty(newMetadata)) {\n        this._log(type, newMetadata);\n      }\n\n      if (typeof stack == \"string\") {\n        const prettyStack = this._formatStackTrace(stack, 1);\n        const colorizedStack = this._colorizeText(prettyStack, Colors.dim);\n        this._log(type, colorizedStack);\n      } else if (stack) {\n        const prettyStack = this._formatStackTrace((stack as unknown as string[]).join(\"\\n\"), 1);\n        const colorizedStack = this._colorizeText(prettyStack, Colors.dim);\n        this._log(type, colorizedStack);\n      } else {\n        throw new Error(\"Stack is null\");\n      }\n    }\n  }\n\n  private _colorizeText(text: string, color: Colors): string {\n    if (!color) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    return color.concat(text).concat(Colors.reset);\n  }\n\n  private _formatStackTrace(stack: string, linesToRemove = 0, prefix = \"\"): string {\n    const lines = stack.split(\"\\n\");\n    for (let i = 0; i < linesToRemove; i++) {\n      lines.shift(); // Remove the top line\n    }\n    return lines\n      .map((line) => `${prefix}${line.replace(/\\s*at\\s*/, \"  â†³  \")}`) // Replace 'at' and prefix every line\n      .join(\"\\n\");\n  }\n\n  private _isEmpty(obj: Record<string, any>) {\n    return !Reflect.ownKeys(obj).some((key) => typeof obj[String(key)] !== \"function\");\n  }\n\n  private _log(type: PrettyLogsWithOk, message: any) {\n    const defaultSymbols: Record<PrettyLogsWithOk, string> = {\n      fatal: \"Ã—\",\n      ok: \"âœ“\",\n      error: \"âš \",\n      info: \"â€º\",\n      debug: \"â€ºâ€º\",\n      verbose: \"ðŸ’¬\",\n    };\n\n    const symbol = defaultSymbols[type];\n\n    // Formatting the message\n    const messageFormatted = typeof message === \"string\" ? message : util.inspect(message, { showHidden: true, depth: null, breakLength: Infinity });\n    // const messageFormatted =\n    //   typeof message === \"string\" ? message : JSON.stringify(Logs.convertErrorsIntoObjects(message));\n\n    // Constructing the full log string with the prefix symbol\n    const lines = messageFormatted.split(\"\\n\");\n    const logString = lines\n      .map((line, index) => {\n        // Add the symbol only to the first line and keep the indentation for the rest\n        const prefix = index === 0 ? `\\t${symbol}` : `\\t${\" \".repeat(symbol.length)}`;\n        return `${prefix} ${line}`;\n      })\n      .join(\"\\n\");\n\n    const fullLogString = logString;\n\n    const colorMap: Record<PrettyLogsWithOk, [keyof typeof console, Colors]> = {\n      fatal: [\"error\", Colors.fgRed],\n      ok: [\"log\", Colors.fgGreen],\n      error: [\"warn\", Colors.fgYellow],\n      info: [\"info\", Colors.dim],\n      debug: [\"debug\", Colors.fgMagenta],\n      verbose: [\"debug\", Colors.dim],\n    };\n\n    const _console = console[colorMap[type][0] as keyof typeof console] as (...args: string[]) => void;\n    if (typeof _console === \"function\") {\n      _console(this._colorizeText(fullLogString, colorMap[type][1]));\n    } else {\n      throw new Error(fullLogString);\n    }\n  }\n}\ninterface Metadata {\n  error?: { stack?: string };\n  stack?: string;\n  message?: string;\n  name?: string;\n  [key: string]: any;\n}\n\nenum Colors {\n  reset = \"\\x1b[0m\",\n  bright = \"\\x1b[1m\",\n  dim = \"\\x1b[2m\",\n  underscore = \"\\x1b[4m\",\n  blink = \"\\x1b[5m\",\n  reverse = \"\\x1b[7m\",\n  hidden = \"\\x1b[8m\",\n\n  fgBlack = \"\\x1b[30m\",\n  fgRed = \"\\x1b[31m\",\n  fgGreen = \"\\x1b[32m\",\n  fgYellow = \"\\x1b[33m\",\n  fgBlue = \"\\x1b[34m\",\n  fgMagenta = \"\\x1b[35m\",\n  fgCyan = \"\\x1b[36m\",\n  fgWhite = \"\\x1b[37m\",\n\n  bgBlack = \"\\x1b[40m\",\n  bgRed = \"\\x1b[41m\",\n  bgGreen = \"\\x1b[42m\",\n  bgYellow = \"\\x1b[43m\",\n  bgBlue = \"\\x1b[44m\",\n  bgMagenta = \"\\x1b[45m\",\n  bgCyan = \"\\x1b[46m\",\n  bgWhite = \"\\x1b[47m\",\n}\nexport enum LogLevel {\n  FATAL = \"fatal\",\n  ERROR = \"error\",\n  INFO = \"info\",\n  VERBOSE = \"verbose\",\n  DEBUG = \"debug\",\n}\n"],"mappings":"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","names":["LogLevel"]}